#!/bin/bash

set -eu

RELEASE=$(config-get release)
ADMIN_USERNAME=$(config-get username)
ADMIN_PASSWORD=$(config-get password)
PLUGINS=$(config-get plugins)
PLUGINS_SITE=$(config-get plugins-site)
PLUGINS_CHECK_CERT=$(config-get plugins-check-certificate)
REMOVE_UNLISTED_PLUGINS=$(config-get remove-unlisted-plugins)
CWD=$(dirname $0)
JENKINS_HOME=/var/lib/jenkins

setup_jenkins_source () {
  # Do something with < Oneiric releases - maybe PPA
  #  apt-get -y install python-software-properties
  #  add-apt-repository ppa:hudson-ubuntu/testing
  juju-log "Configuring source of jenkins as $RELEASE"
  # Configure to use upstream archives
  # lts - debian-stable
  # trunk - debian
  case $RELEASE in
    distro)
      # don't setup upstream source, install from archive
	  # only good for oneiric
      return 0;;
    lts)
      SOURCE="debian-stable";;
    trunk)
      SOURCE="debian";;
    *)
      juju-log "release configuration not recognised" && exit 1;;
  esac
  # Setup archive to use appropriate jenkins upstream
  wget -q -O - http://pkg.jenkins-ci.org/$SOURCE/jenkins-ci.org.key | apt-key add -
  echo "deb http://pkg.jenkins-ci.org/$SOURCE binary/" \
      > /etc/apt/sources.list.d/jenkins.list
  apt-get update || true
}
# Only setup the source if jenkins is not already installed
# this makes the config 'release' immutable - i.e. you 
# can change source once deployed
[[ -d /var/lib/jenkins ]] || setup_jenkins_source

# Install jenkins
install_jenkins () {
  juju-log "Installing/upgrading jenkins..."
  apt-get -y install -qq jenkins
}
# Re-run whenever called to pickup any updates
install_jenkins

configure_jenkins_user () {
  juju-log "Configuring user for jenkins..."
  # Generate Salt and Hash Password for Jenkins
  SALT="$(< /dev/urandom tr -dc A-Za-z | head -c6)"
  PASSWORD="$SALT:$(echo -n "$ADMIN_PASSWORD{$SALT}" | shasum -a 256 | awk '{ print $1 }')"
  mkdir -p $JENKINS_HOME/users/$ADMIN_USERNAME
  sed -e s#__USERNAME__#$ADMIN_USERNAME# -e s#__PASSWORD__#$PASSWORD# \
	  $CWD/../templates/user-config.xml > $JENKINS_HOME/users/$ADMIN_USERNAME/config.xml
  chown -R jenkins:nogroup $JENKINS_HOME/users
}
# Always run - even if config has not changed, its safe
configure_jenkins_user

boostrap_jenkins_configuration (){
  juju-log "Bootstrapping secure initial configuration in Jenkins..."
  cp $CWD/../templates/jenkins-config.xml $JENKINS_HOME/config.xml
  chown jenkins:nogroup $JENKINS_HOME/config.xml
  touch /var/lib/jenkins/config.bootstrapped
}
# Only run on first invocation otherwise we blast
# any configuration changes made
[[ -f /var/lib/jenkins/config.bootstrapped ]] || boostrap_jenkins_configuration

install_plugins(){
  juju-log "Installing plugins ($PLUGINS)"
  mkdir -p $JENKINS_HOME/plugins
  chmod a+rx $JENKINS_HOME/plugins
  track_dir=`mktemp -d /tmp/plugins.installed.XXXXXXXX`
  ln -s $JENKINS_HOME/plugins/*.hpi $track_dir
  local plugin=""
  local plugin_file=""
  local opts=""
  for plugin in $PLUGINS ; do
    plugin_file=$JENKINS_HOME/plugins/$plugin.hpi
    # Note that by default wget verifies certificates as of 1.10.
    if [ "$PLUGINS_CHECK_CERT" = "no" ] ; then
      opts="--no-check-certificate"
    fi
    wget $opts --timestamping -q -O $plugin_file $PLUGINS_SITE/latest/$plugin.hpi
    chmod a+r $plugin_file
    rm -f $track_dir/$plugin.hpi
  done
  # Warn about undesirable plugins, or remove them.
  unlisted_plugins=`ls $track_dir`
  [[ -n "$unlisted_plugins" ]] || return 0
  if [[ $REMOVE_UNLISTED_PLUGINS = "yes" ]] ; then
    for plugin_file in `ls $track_dir` ; do
      rm -vf $JENKINS_HOME/plugins/$plugin_file
    done
  else
    juju-log -l WARNING "Unlisted plugins: (`ls $track_dir`) Not removed. Set remove-unlisted-plugins to yes to clear them away."
  fi
}

[[ -z "$PLUGINS" ]] || install_plugins

juju-log "Restarting jenkins to pickup configuration changes"
service jenkins restart

# Install helpers  - python jenkins ++
install_python_jenkins () {
  juju-log "Installing python-jenkins..."
	# Pickup backports as required for natty
  add-apt-repository ppa:python-jenkins-developers/backports
  # Might not pickup for current release - so ignore errors
  apt-get update || true
  apt-get -y install -qq python-jenkins
}
# Only install once
[[ -d /usr/share/pyshared/jenkins ]] || install_python_jenkins

# Install some tools - can get set up deployment time
install_tools () {
  juju-log "Installing tools..."
  apt-get -y install -qq `config-get tools`
}
# Always run - tools might get re-configured
install_tools 

install_juju() {
  juju-log "Installing juju for local testing..."
  apt-add-repository ppa:juju/pkgs
  # Might not pickup for current release - so ignore errors
  apt-get update || true
  apt-get -qq install -y juju charm-tools apt-cacher-ng zookeeper libvirt-bin lxc charm-helper-sh
}
install_juju

generate_ssh_keys() {
  su -l jenkins -c "ssh-keygen -q -N '' -t rsa -b 2048 -f $JENKINS_HOME/.ssh/id_rsa"
}
[ -f $JENKINS_HOME/.ssh/id_rsa ] || generate_ssh_keys

make_jenkins_sudo() {
  echo "jenkins ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/91-jenkins-charmtester
  chmod 0440 /etc/sudoers.d/91-jenkins-charmtester
}
use_tmpfs_for_tests() {
  echo "tmpfs /var/lib/lxc tmpfs size=2g 0 0" >> /etc/fstab
  # maybe do the same for /var/cache/lxc?
  mount -at tmpfs 
}
configure_juju_local_provider() {
  mkdir -p $JENKINS_HOME/.juju
  cat > $JENKINS_HOME/.juju/environments.yaml <<EOF
environments:
  local:
    type: local
    data-dir: $JENKINS_HOME/.juju/juju-local
    admin-secret: abcdefghijklmnopqrstuvwxyz1234567890
    control-bucket: foo-bucket
    default-series: oneiric
    juju-origin: ppa
EOF
  chown -Rf jenkins.jenkins $JENKINS_HOME/.juju
  addgroup jenkins libvirtd
  make_jenkins_sudo
  use_tmpfs_for_tests
}
[ -d $JENKINS_HOME/.juju ] || configure_juju_local_provider

create_charms_repo() {
  mkdir -p $JENKINS_HOME/charms/oneiric
  chown -Rf jenkins:jenkins $JENKINS_HOME
}
[ -d $JENKINS_HOME/charms/oneiric ] || create_charms_repo

get_job_name() {
  local charm_name=$1
  echo "oneiric-charm-$charm_name"
}
get_api_token() {
  echo `echo $ADMIN_PASSWORD | shasum | awk '{ print $1 }'`
}
create_job_for_charm() {
  local charm_name=$1
  local job_name=$(get_job_name $charm_name)
  local api_token=$(get_api_token)
  mkdir -p -m755 $JENKINS_HOME/jobs/$job_name
  export JENKINS_HOME
  export charm_name
  export job_name
  export api_token
  cheetah fill --stdout --env templates/job-config.xml > $JENKINS_HOME/jobs/$job_name/config.xml
  cheetah fill --stdout --env templates/charm-install-test.sh > $JENKINS_HOME/jobs/$job_name/charm-install-test.sh
  chmod 755 $JENKINS_HOME/jobs/$job_name/charm-install-test.sh
  cp files/juju-service-started $JENKINS_HOME/
  chmod 755 $JENKINS_HOME/juju-service-started
  chown -Rf jenkins.jenkins $JENKINS_HOME/juju-service-started
}
blacklisted() {
  local charm_name=$1
  for blacklisted_charm in `cat etc/local-blacklisted-charms`; do
    if [ $blacklisted_charm == $charm_name ]; then
      return 0
    fi
  done
  return 1
}
load_charm_jobs() {
  for charm_name in `su -l jenkins -c "charm list | grep lp:charms | sed 's/lp:charms\///'"`; do
    blacklisted $charm_name && juju-log "skipping blacklisted $charm_name" || create_job_for_charm $charm_name
  done
  chown -Rf jenkins.jenkins $JENKINS_HOME/jobs/
}
load_charm_jobs # ok, is idempotent
# what about calling through config?... have to split creat_job_for_charm into common lib

juju-log "Opening ports"
open-port 8080

exit 0
